#include <GL/glut.h>
#include <iostream>

double posx = 0.0;
double posy = 0.0;
double posz = -5.0; // Cube's initial z position
double angle = 0.0;  // Rotation angle

void init(void) {

    glClearColor(1.0, 1.0, 1.0, 0.0);
    glEnable(GL_DEPTH_TEST);          // Enable depth testing to handle occlusion in 3D
    glMatrixMode(GL_PROJECTION);      // Set the projection matrix mode
    glLoadIdentity();

    // Set up a perspective projection
    gluPerspective(45.0, 640.0/480.0, 0.1, 100.0);

    glMatrixMode(GL_MODELVIEW);  // Set the modelview matrix for object transformations
}

void keySpecial(int key, int x, int y) {
    switch (key) {
    case GLUT_KEY_UP:
        posy += 0.1;
        break;
    case GLUT_KEY_DOWN:
        posy -= 0.1;
        break;
    case GLUT_KEY_LEFT:
        posx -= 0.1;
        break;
    case GLUT_KEY_RIGHT:
        posx += 0.1;
        break;
    }
    glutPostRedisplay();
}

void drawCube() {
    glBegin(GL_QUADS);

    // Front face
    glColor4f(1.0, 0.0, 0.0, 0.5); // Red
    glVertex3f(-1.0, -1.0, 1.0);
    glVertex3f(1.0, -1.0, 1.0);
    glVertex3f(1.0, 1.0, 1.0);
    glVertex3f(-1.0, 1.0, 1.0);

    // Back face
    glColor4f(0.0, 1.0, 0.0, 0.5); // Green
    glVertex3f(-1.0, -1.0, -1.0);
    glVertex3f(-1.0, 1.0, -1.0);
    glVertex3f(1.0, 1.0, -1.0);
    glVertex3f(1.0, -1.0, -1.0);

    // Top face
    glColor4f(0.0, 0.0, 1.0, 0.5); // Blue
    glVertex3f(-1.0, 1.0, -1.0);
    glVertex3f(-1.0, 1.0, 1.0);
    glVertex3f(1.0, 1.0, 1.0);
    glVertex3f(1.0, 1.0, -1.0);

    // Bottom face
    glColor4f(1.0, 1.0, 0.0, 0.5); // Yellow
    glVertex3f(-1.0, -1.0, -1.0);
    glVertex3f(1.0, -1.0, -1.0);
    glVertex3f(1.0, -1.0, 1.0);
    glVertex3f(-1.0, -1.0, 1.0);

    // Right face
    glColor4f(1.0, 0.0, 1.0, 0.5); // Magenta
    glVertex3f(1.0, -1.0, -1.0);
    glVertex3f(1.0, 1.0, -1.0);
    glVertex3f(1.0, 1.0, 1.0);
    glVertex3f(1.0, -1.0, 1.0);

    // Left face
    glColor4f(0.0, 1.0, 1.0, 0.5); // Cyan
    glVertex3f(-1.0, -1.0, -1.0);
    glVertex3f(-1.0, -1.0, 1.0);
    glVertex3f(-1.0, 1.0, 1.0);
    glVertex3f(-1.0, 1.0, -1.0);

    glEnd();
}

void display() {

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);  // Clear both color and depth buffers
    glLoadIdentity();  // Reset the current modelview matrix


    glPushMatrix();
    glTranslatef(posx, posy, posz);  // Move the cube based on user input=
    glRotatef(angle, 1.0, 1.0, 0.0);  // Rotate around the x and y axes
    glScalef(0.5, 0.5, 0.5);

    glColor3f(0.5, 0.5, 0.5);
    glutSolidTeapot(2.0);
    glColor3f(1.0, 0.0, 0.0);
    glutWireTeapot(2.0);
    glPopMatrix();

 

    glFlush();
    glutSwapBuffers();  // Swap the front and back buffers
}

// Our custom update function for animation
void update(int value) {
 //   angle += 1.3;  // Increase the angle to rotate the cube
 //   if (angle > 360.0) angle -= 360.0;  // Keep the angle within 0-360 range

    glutPostRedisplay();  // Redraw the scene
    glutTimerFunc(16, update, 0);  // Call update every 16 ms (around 60 FPS)
}

int main(int argc, char** argv) {

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);  // Use double buffering and depth buffer

    glutInitWindowSize(640, 480);  // Set window size
    glutInitWindowPosition(100, 100);  // Set window position

    glutCreateWindow("3D Cube Rotation");  // Create the window

    init();  // Initialize OpenGL

    glutDisplayFunc(display);
    glutSpecialFunc(keySpecial);
    glutTimerFunc(0, update, 0);

    glutMainLoop();

    return 0;
}
